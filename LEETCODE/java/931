class Solution {

    public static double min3(double a, double b, double c) {
        return Math.min(Math.min(a, b), c);
    }

    public int minFallingPathSum(int[][] matrix) {
        int ans = 0;

        if (matrix.length == 1){
            return matrix[0][0];
        }else if (matrix.length == 0){
            return 0;
        }

        for (int i = 1; i < matrix.length; i++){
            for (int j = 0; j < matrix.length; j++){
                if (i != matrix.length){
                    if (j == 0){
                        matrix[i][j] += Math.min(matrix[i-1][j], matrix[i-1][j+1]);
                    } else if (j == matrix.length - 1){
                        matrix[i][j] += Math.min(matrix[i-1][j-1], matrix[i-1][j]);
                    }else{
                        matrix[i][j] += min3(matrix[i-1][j], matrix[i-1][j+1], matrix[i-1][j-1]);
                    }
                }
            }
            if (i == matrix.length - 1){
                int min = 9999999;
                for (int m = 0 ; m < matrix.length; m++){
                    if (matrix[matrix.length - 1][m] < min){
                        min = matrix[matrix.length - 1][m];
                    }
                    if (m == matrix.length - 1){
                        ans = min;
                    }
                }
                
            }

        }
        return ans;
    }


}
