/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTWOLists(ListNode list1, ListNode list2){
        while (list1 != null && list2 != null){
            if (list1.val <= list2.val){
                list1.next = mergeTWOLists(list1.next, list2);
                return list1;
            }else{
                list2.next = mergeTWOLists(list1, list2.next);
                return list2;
            }
        }
        
        return list1 == null ? list2 : list1;
    }

    public ListNode recursiveMerge(ListNode[] lists, int start, int end){
        if(lists == null || lists.length == 0) return null;
        if(end - start == 1) return mergeTWOLists(lists[start], lists[end]);
        if(start == end) return lists[start];

        int midPoint = start + (end - start) /2;

        ListNode left = recursiveMerge(lists, start, midPoint);
        ListNode right = recursiveMerge(lists, midPoint+1, end);
        return mergeTWOLists(left, right);
    }

    public ListNode mergeKLists(ListNode[] lists) {
        return recursiveMerge(lists, 0, lists.length-1);
    }
}
